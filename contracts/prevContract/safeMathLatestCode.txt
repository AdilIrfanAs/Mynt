// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.7;
import "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol";
import "openzeppelin-solidity/contracts/utils/math/SafeMath.sol";
contract TestPTP is ERC20 {
     using SafeMath for uint256;

    uint256 startDate = 1653300600;                            
    uint256 counterId = 0;            
    address originAddress = 0x6b26678F4f392B0E400CC419FA3E5161759ca380;
    uint256 originAmount = 0;  
    uint256 stakerPool = 0; 
    uint256 unClaimedBtc = 19000000 * 10 ** 8;
    uint256 claimedBTC = 0;
    uint256 maxValueBPB = 150000000 * 10 ** 8;   
    uint256 divValueBPB = 1500000000 * 10 ** 8;
    uint256 shareRateDecimals = 10 ** 4;
    uint256 shareRate;
    uint256 claimedBtcAddrCount = 0;
    uint256 BIG_PAY_DAY = 351;
    uint256 CLAIMABLE_BTC_ADDR_COUNT = 27997742;
    uint256 lastUpdatedDay;
    address[] internal stakeAddress;
    address[] internal freeStakeholders;
    // onlyOwner
    address internal owner;
    modifier onlyOwner {
      require(msg.sender == owner);
      _;
    }

    struct transferInfo {
        address to;
        address from; 
        uint256 amount;
    }

    struct freeStakeClaimInfo {
        string btcAddress;
        uint256 balanceAtMoment;
        uint256 dayFreeStake;
        uint256 claimedAmount;
        uint256 rawBtc;
    }

    struct stakeRecord {
       uint256 stakeShare;
       uint numOfDays;
       uint256 currentTime;
       bool claimed;
       uint256 id;
       uint256 startDay;
       uint256 endDay;
       uint256 endDayTimeStamp;
       bool isFreeStake;
       string stakeName;
       uint256 stakeAmount;
       uint256 sharePrice; 
       
    }   
    //Adoption Amplifier Struct
    struct RecordInfo {
        uint256 amount;
        uint256 time;
        bool claimed;
        address user;
        address refererAddress;
    }

    struct referalsRecord {
        address referdAddress;
        uint256 day;
        uint256 awardedPTP;
    }

    struct dailyData{
        uint256 dayPayout;
        uint256 stakeShareTotal;
        uint256 unclaimed;
        uint256 mintedTokens;
        uint256 stakedToken;
    }

    mapping (uint256 => mapping(address => RecordInfo)) public AARecords;
    mapping (address => referalsRecord[]) public referals;
    mapping (uint => uint256) public totalBNBSubmitted; 
    mapping (uint256 => address[]) public perDayAARecords;
    mapping (address => uint256) internal stakes;
    mapping (address => stakeRecord[]) public  stakeHolders;
    mapping (address => transferInfo[]) public transferRecords;
    mapping (address => freeStakeClaimInfo[]) public freeStakeClaimRecords;
    mapping (string  => bool) public btcAddressClaims;
    mapping (uint256 => uint256) public perDayPenalties;
    mapping (uint256 => uint256) public perDayUnclaimedBTC;
    mapping (uint256 => dailyData) public dailyDataUpdation;
    mapping (uint256 => uint256) public subtractedShares;

    event Received(address, uint256);
    event CreateStake(uint256 id,uint256 stakeShares);
    event claimStakeRewardEvent(uint256 amount,uint256 shares,uint256 totalDays, uint256 newShare);
    constructor() ERC20("10Pantacles", "PTP")  {
        owner =  msg.sender;
        lastUpdatedDay = 0;
        shareRate = 1 * shareRateDecimals;
    }

    function totalBalance() external view returns(uint) {
     return payable(address(this)).balance;
    }

    function withdraw() public onlyOwner {
     payable(msg.sender).transfer(this.totalBalance());
    }

    function mintAmount(address user, uint256 amount) internal {
            uint256 currentDay = findDay();
            _mint(user,amount);
            dailyData memory dailyRecord = dailyDataUpdation[currentDay];
            dailyRecord.mintedTokens = dailyRecord.mintedTokens.add(amount);
            dailyDataUpdation[currentDay] = dailyRecord;
    }

    function findDay() public view returns(uint) {
        uint day = block.timestamp.sub(startDate);
        day = day.div(180);
        return day;
    }

    function checkDataUpdationRequired () internal view returns(bool){
        uint256 crrDay = findDay();
        if(crrDay > lastUpdatedDay){
            return true;
        }
        else{
            return false;
        }
    }

    function updateDailyData(uint256 beginDay,uint256 endDay) internal{
       
        if(lastUpdatedDay == 0){
            beginDay = 0;
        }
        for(uint256 i = beginDay; i<= endDay; i++){
            uint256 iterator = i;
            if(iterator != 0){
                iterator = iterator.sub(1);
            }
            dailyData memory dailyRecord = dailyDataUpdation[iterator];
            uint256 dailyLimit =getDailyShare(iterator);
            uint256 sharesToSubtract = subtractedShares[i];
            uint256 totalShares = dailyRecord.stakeShareTotal.sub(sharesToSubtract);
            dailyData memory myRecord = dailyData({dayPayout:dailyLimit,stakeShareTotal:totalShares,unclaimed:dailyRecord.unclaimed,
            mintedTokens:dailyRecord.mintedTokens,stakedToken:dailyRecord.stakedToken});
            dailyDataUpdation[i] = myRecord;
        }
        lastUpdatedDay = endDay;
    }

    function getUpdatedData(uint256 day) public view returns (dailyData memory) {
        return dailyDataUpdation[day];
    }

    function getDailyData(uint256 day) public view returns (dailyData memory) {
        if(lastUpdatedDay < day){
            return dailyDataUpdation[lastUpdatedDay];
        }
        else{
            return dailyDataUpdation[day];
        }

    } 

    function addStakeholder(address _stakeholder) public {
        (bool _isStakeholder, ) = isStakeholder(_stakeholder);
        if(!_isStakeholder){
            stakeAddress.push(_stakeholder);
        }
    }

    function isStakeholder(address _address) public view returns(bool, uint256) { 

        for (uint256 s = 0; s < stakeAddress.length; s += 1){
            if (_address == stakeAddress[s]) return (true, s);
        }
        return (false, 0);
    }

    function generateId() public returns(uint256) {
        return counterId++;

    } 

    function findEndDayTimeStamp(uint256 day) public view returns(uint256){
       uint256 futureDays = day.mul(180);
       futureDays = block.timestamp.add(futureDays);
       return futureDays;
    }

    function findMin (uint256 value) public view returns(uint256){
        
        uint256 minValue;
        if(value <=  maxValueBPB){
            minValue = value;
        }
        else{
            minValue = maxValueBPB; 
        }
       return minValue; 
    }

    function findBiggerPayBetter(uint256 inputPTP) public view returns(uint256){
        uint256 minValue = findMin(inputPTP);
        uint256 BPB = inputPTP.mul(minValue);
        BPB = BPB.div(divValueBPB); 
        return BPB;
    }  

    function findLongerPaysBetter(uint256 inputPTP, uint256 numOfDays) public pure returns(uint256){
        uint256 daysToUse = numOfDays.sub(1); 
        uint256 LPB = inputPTP.mul(daysToUse);
        LPB = LPB.div(1820);
        return LPB;
    } 

    function generateShare(uint256 inputPTP, uint256 LPB , uint256 BPB) public view returns(uint256){
            uint256 share = LPB.add(BPB);
            share = share.add(inputPTP);
            share = share.div(shareRate);
            share = share.mul(shareRateDecimals);
            return share;  
    }

    function createStake(uint256 _stake,uint day,string memory stakeName) public {
        uint256 balance = balanceOf(msg.sender);
        require(balance >= _stake,'Not enough amount for staking');
        (bool _isStakeholder, ) = isStakeholder(msg.sender);
        if(! _isStakeholder) addStakeholder(msg.sender);
         _burn(msg.sender,_stake);
        uint256 id = generateId();
        uint256 currentDay = findDay();
        uint256 endDay = currentDay.add(day);
        uint256 endDayTimeStamp = findEndDayTimeStamp(day);
        stakerPool = stakerPool.add(_stake);
        uint256 BPB = findBiggerPayBetter(_stake);
        originAmount = originAmount.add(BPB);
        uint256 LPB = findLongerPaysBetter(_stake,day);
        originAmount = originAmount.add(LPB);
        uint256 share = generateShare(_stake,LPB,BPB);
        require(share >= 1,'Share too low');
        bool updateRequire = checkDataUpdationRequired();
        if(updateRequire){
            uint256 startDay = lastUpdatedDay.add(1);
            updateDailyData(startDay,currentDay);
        }
        subtractedShares[endDay] = subtractedShares[endDay].add(share);
        stakeRecord memory myRecord = stakeRecord({id:id,stakeShare:share,stakeName:stakeName, numOfDays:day, currentTime:block.timestamp,claimed:false,startDay:currentDay,endDay:endDay,
        endDayTimeStamp:endDayTimeStamp,isFreeStake:false,stakeAmount:_stake,sharePrice:shareRate});
        stakeHolders[msg.sender].push(myRecord);
        dailyData memory dailyRecord = dailyDataUpdation[currentDay];
        dailyRecord.stakeShareTotal = dailyRecord.stakeShareTotal.add(share);
        dailyRecord.dayPayout = getDailyShare(currentDay);
        dailyRecord.unclaimed = unClaimedBtc;
        dailyRecord.mintedTokens = dailyRecord.mintedTokens.sub(_stake);
        dailyRecord.stakedToken = dailyRecord.stakedToken.add(_stake);
        dailyDataUpdation[currentDay] = dailyRecord;
        emit CreateStake(id,share);
    }

    function transferStake(uint256 id,address transferTo) public {
        uint256 currentDay = findDay();
        bool updateRequire = checkDataUpdationRequired();
        if(updateRequire){
            uint256 startDay = lastUpdatedDay.add(1);
            updateDailyData(startDay,currentDay);
        }
     stakeRecord[] memory myRecord = stakeHolders[msg.sender];
     for(uint i=0; i<myRecord.length; i++){
        if(myRecord[i].id == id){
        stakeHolders[transferTo].push(stakeHolders[msg.sender][i]); 
        delete(stakeHolders[msg.sender][i]);
        }
     }
    }

    function getDailyShare (uint256 day) public view returns(uint256 dailyRewardOfDay){
        uint256 penalties = perDayPenalties[day];
        dailyData memory data = getDailyData(day);
        uint256 allocSupply = data.mintedTokens.add(data.stakedToken);
        dailyRewardOfDay = allocSupply.mul(10000);
        dailyRewardOfDay = dailyRewardOfDay.div(100448995);
        dailyRewardOfDay = dailyRewardOfDay.add(penalties);
        return  dailyRewardOfDay;
    }

    function findBPDPercent (uint256 share,uint256 totalSharesOfBPD) public pure returns (uint256){
        uint256 totalShares = totalSharesOfBPD;
        uint256 sharePercent = share * 10 ** 4;
        sharePercent = sharePercent.div(totalShares);
        sharePercent = sharePercent * 10 ** 2;
        return sharePercent;   
    }

    function findStakeSharePercent (uint256 share,uint256 day) public view returns (uint256){
        dailyData memory data = dailyDataUpdation[day];
        uint256 sharePercent = share * 10 ** 4;
        sharePercent = sharePercent.div(data.stakeShareTotal);
        sharePercent = sharePercent * 10 ** 2;
        return sharePercent;   
    }

    function _calcAdoptionBonus(uint256 payout)public view returns (uint256){
        uint256 bonus = 0;
        uint256 viral = payout.mul(claimedBtcAddrCount);
        viral = viral.div(CLAIMABLE_BTC_ADDR_COUNT);
        uint256 crit = payout.mul( claimedBTC) ;
        crit = crit.div(unClaimedBtc);
        bonus = viral.add(crit);
        return bonus; 
    }

    function getAllDayReward(uint256 beginDay,uint256 endDay,uint256 stakeShare) public view returns (uint256 ){
         uint256 totalIntrestAmount = 0; 
        for (uint256 day = beginDay; day < endDay; day++) {
            dailyData memory data = dailyDataUpdation[day];
            uint256 dayShare = getDailyShare(day);
            uint256 currDayAmount = dayShare.mul(stakeShare);
            currDayAmount = currDayAmount.div(data.stakeShareTotal);
            totalIntrestAmount = totalIntrestAmount.add(currDayAmount); 
            }
          if (beginDay <= BIG_PAY_DAY && endDay > BIG_PAY_DAY) {
              dailyData memory data = dailyDataUpdation[350];  
              uint256 sharePercentOfBPD = findBPDPercent(stakeShare,data.stakeShareTotal);
              uint256 bigPayDayAmount = getBigPayDay();
              uint256 bigPaySlice = bigPayDayAmount.mul(sharePercentOfBPD);
              bigPaySlice = bigPaySlice.div(100 * 10 ** 4);
              totalIntrestAmount = bigPaySlice.add(_calcAdoptionBonus(bigPaySlice));
            }
        return totalIntrestAmount;
    }

    function findDayDiff(uint256 endDayTimeStamp) public view returns(uint) {
        uint day = block.timestamp.sub(endDayTimeStamp);
        day = day.div(180);
        return day;
    }
    
    function findEstimatedIntrest (uint256 stakeShare,uint256 startDay) public view returns (uint256) {
            uint256 day = findDay();
            uint256 sharePercent = findStakeSharePercent(stakeShare,startDay);
            uint256 dailyEstReward = getDailyShare(day);
            uint256 perDayProfit = dailyEstReward.mul(sharePercent);
            perDayProfit = perDayProfit.div(100 * 10 ** 4);
            return perDayProfit;

    }

    function getDayRewardForPenalty(uint256 beginDay,uint256 stakeShare, uint256 dayData) public view returns (uint256){
         uint256 totalIntrestAmount = 0;
          for (uint256 day = beginDay; day < beginDay.add(dayData); day++) {
            uint256 dayShare = getDailyShare(day);
            totalIntrestAmount = dayShare.mul(stakeShare);
            dailyData memory data = dailyDataUpdation[day];
            totalIntrestAmount = totalIntrestAmount.div(data.stakeShareTotal);
            }
        return totalIntrestAmount;
    }

    function earlyPenaltyForShort(stakeRecord memory stakeData,uint256 totalIntrestAmount) public view returns(uint256){
            uint256 emergencyDayEnd = findDayDiff(stakeData.currentTime);
            uint256 penalty;
            if(emergencyDayEnd == 0){
                uint256 estimatedAmount = findEstimatedIntrest(stakeData.stakeShare,stakeData.startDay);
                estimatedAmount = estimatedAmount.mul(90);
                penalty = estimatedAmount;
            }

            if(emergencyDayEnd < 90 && emergencyDayEnd !=0){
                penalty = totalIntrestAmount.mul(90);
                penalty = penalty.div(emergencyDayEnd);
               
            }

            if(emergencyDayEnd == 90){
                penalty = totalIntrestAmount;
                
            }

            if(emergencyDayEnd > 90){
                uint256 rewardTo90Days = getDayRewardForPenalty(stakeData.startDay,stakeData.stakeShare,89);
                 penalty = totalIntrestAmount.sub(rewardTo90Days);
            }
            return penalty;
    }

    function earlyPenaltyForLong(stakeRecord memory stakeData,uint256 totalIntrestAmount) public view returns(uint256){
            uint256 emergencyDayEnd = findDayDiff(stakeData.currentTime);
            uint256 endDay = stakeData.numOfDays;
            uint256 halfOfStakeDays = endDay.div(2);
            uint256 penalty ;
            if(emergencyDayEnd == 0){
                uint256 estimatedAmount = findEstimatedIntrest(stakeData.stakeShare,stakeData.startDay);
                estimatedAmount = estimatedAmount.mul(halfOfStakeDays);
                penalty = estimatedAmount;
            }

            if(emergencyDayEnd < halfOfStakeDays && emergencyDayEnd != 0){
                penalty = totalIntrestAmount.mul(halfOfStakeDays);
                penalty = penalty.div(emergencyDayEnd);
            }

            if(emergencyDayEnd == halfOfStakeDays){
                penalty = totalIntrestAmount;
                
            }

            if(emergencyDayEnd > halfOfStakeDays){
                uint256 rewardToHalfDays = getDayRewardForPenalty(stakeData.startDay,stakeData.stakeShare,halfOfStakeDays);
                penalty = totalIntrestAmount.sub(rewardToHalfDays);   
            }
            return penalty;
    }

    function latePenalties (stakeRecord memory stakeData,uint256 totalAmountReturned) public  returns(uint256){
            uint256 dayAfterEnd = findDayDiff(stakeData.endDayTimeStamp);
            if(dayAfterEnd > 14){
            uint256 transferAmount = totalAmountReturned;
            uint256 perDayDeduction = 143 ;
            uint256 penalty = transferAmount.mul(perDayDeduction);
            penalty = penalty.div(1000); 
            penalty = penalty.div(100);
            uint256 totalPenalty = dayAfterEnd.mul(penalty);
            uint256 halfOfPenalty = totalPenalty.div(2);
            uint256 actualAmount = 0;
            uint256 day = findDay();
             day = day.add(1);
            if(totalPenalty < totalAmountReturned){

             perDayPenalties[day] = perDayPenalties[day].add(halfOfPenalty);
             originAmount = originAmount.add(halfOfPenalty);
             actualAmount = totalAmountReturned.sub(totalPenalty);
            }
            else{
             uint256 halfAmount = actualAmount.div(2);
             perDayPenalties[day] = perDayPenalties[day].add(halfAmount);
             originAmount = originAmount.add(halfAmount); 
            }
            return actualAmount;
            }
            else{
            return totalAmountReturned;
            }
    } 

    function settleStakes (address _sender,uint256 id) internal  {
        stakeRecord[] memory myRecord = stakeHolders[_sender];
        for(uint i=0; i<myRecord.length; i++){
            if(myRecord[i].id == id){
                myRecord[i].claimed = true;
                stakeHolders[_sender][i] = myRecord[i];
            }
        }
    }

    function calcNewShareRate (uint256 fullAmount,uint256 stakeShares,uint256 stakeDays) public view returns (uint256){
        uint256 BPB = findBiggerPayBetter(fullAmount);
        uint256 LPB = findLongerPaysBetter(fullAmount,stakeDays);
        uint256 newShareRate = fullAmount.add(BPB.add(LPB));
        newShareRate = newShareRate.div(stakeShares);
        newShareRate = newShareRate.mul(shareRateDecimals);
        return newShareRate ;
    }

    function claimStakeReward (uint id) public  {
        (bool _isStakeholder, ) = isStakeholder(msg.sender);
        require(_isStakeholder,'Not SH');

        stakeRecord[] memory myRecord2 = stakeHolders[msg.sender];
        stakeRecord memory stakeData;
        uint256 currDay = findDay();
        uint256 penaltyDay = currDay.add(1);
        uint256 dayToFindBonus;
        uint256 amountToNewShareRate;
        bool updateRequire = checkDataUpdationRequired();
        if(updateRequire){
            uint256 startDay = lastUpdatedDay.add(1);
            updateDailyData(startDay,currDay);
        }
        for(uint i=0; i<myRecord2.length; i++){
            if(myRecord2[i].id == id){ 
                stakeData = myRecord2[i];
            }
        }
        if(stakeData.endDay > currDay){
            dayToFindBonus = currDay;
        }
        else{
            dayToFindBonus = stakeData.endDay;
        }
        uint256 totalIntrestAmount = getAllDayReward(stakeData.startDay,dayToFindBonus,stakeData.stakeShare);
        if(block.timestamp < stakeData.endDayTimeStamp){
           require(stakeData.isFreeStake != true,"Free Stake can't be claim early");
            if(stakeData.numOfDays < 180){
                uint256 penalty = earlyPenaltyForShort(stakeData,totalIntrestAmount); 
                uint256 halfOfPenalty = penalty.div(2);
                uint256 compeleteAmount = stakeData.stakeAmount.add(totalIntrestAmount);
                uint256 amountToMint = 0;
                if(penalty < compeleteAmount){ 
                perDayPenalties[penaltyDay] = perDayPenalties[penaltyDay].add(halfOfPenalty);
                originAmount = originAmount.add(halfOfPenalty); 
                amountToMint = compeleteAmount.sub(penalty);
                }
                else{
                 uint256 halfAmount = compeleteAmount.div(2);
                 perDayPenalties[penaltyDay] = perDayPenalties[penaltyDay].add(halfAmount);
                 originAmount = originAmount.add(halfAmount); 
                }
                amountToNewShareRate = amountToMint;
                mintAmount(msg.sender,amountToMint);
            }
            
            if(stakeData.numOfDays >= 180){
                uint256 penalty = earlyPenaltyForLong(stakeData,totalIntrestAmount); 
                uint256 halfOfPenalty = penalty.div(2);
                uint256 compeleteAmount = stakeData.stakeAmount.add(totalIntrestAmount);
                uint256 amountToMint = 0;
                if(penalty < compeleteAmount){ 
                 perDayPenalties[penaltyDay] = perDayPenalties[penaltyDay].add(halfOfPenalty);
                 originAmount = originAmount.add(halfOfPenalty); 
                 amountToMint = compeleteAmount.sub(penalty);
                }
                else{
                 uint256 halfAmount = compeleteAmount.div(2);
                 perDayPenalties[penaltyDay] = perDayPenalties[penaltyDay].add(halfAmount);
                 originAmount = originAmount.add(halfAmount); 
                }
                amountToNewShareRate = amountToMint;
                mintAmount(msg.sender,amountToMint);
            } 
        }

        if(block.timestamp >= stakeData.endDayTimeStamp){
         uint256 totalAmount = stakeData.stakeAmount.add(totalIntrestAmount);
         uint256 amounToMinted = latePenalties(stakeData,totalAmount);
         amountToNewShareRate = amounToMinted;
         mintAmount(msg.sender,amounToMinted);
        }
        settleStakes(msg.sender,id);
        uint256 newShare = calcNewShareRate(amountToNewShareRate, stakeData.stakeShare, stakeData.numOfDays);
        if(newShare > shareRate){
            shareRate = newShare;
        }
        dailyData memory dailyRecord = dailyDataUpdation[currDay];
        // dailyRecord.mintedTokens = dailyRecord.mintedTokens.add(amountToNewShareRate);
        dailyRecord.stakedToken = dailyRecord.stakedToken.sub(stakeData.stakeAmount);
        dailyDataUpdation[currDay] = dailyRecord;
       emit claimStakeRewardEvent(amountToNewShareRate,stakeData.stakeShare,stakeData.numOfDays, newShare);
    }

    function getStakeRecords() public view returns (stakeRecord[] memory stakeHolder) {
        
        return stakeHolders[msg.sender];
    }

    function getStakeSharePercent(address user, uint256 stakeId, uint256 dayToFind) external view returns(uint256){
        stakeRecord[] memory myRecord = stakeHolders[user];
        dailyData memory data = dailyDataUpdation[dayToFind];
        uint256 sharePercent;
        for(uint i=0; i<myRecord.length; i++){
            if(myRecord[i].id == stakeId){
            sharePercent = myRecord[i].stakeShare * 10 ** 4;
            sharePercent = sharePercent.div(data.stakeShareTotal);
            }
        }
        return  sharePercent;
    }
    //Free Stake functionality
    function isFreeStakeholder(address _address) public view returns(bool, uint256) { 
        for (uint256 s = 0; s < freeStakeholders.length; s += 1){
            if (_address == freeStakeholders[s]) return (true, s);
        }
        return (false, 0);
    }

    function createFreeStake(address user,string memory btcAddress,uint balance,address refererAddress) public onlyOwner{
        require(block.timestamp < startDate + 31536000,'Free stakes available just 1 year');
        require(block.timestamp >= startDate ,'Free stakes not started yet');
        require(balance > 0, 'You need to have more than 0 Btc in your wallet');
        (bool _isFreeStakeholder, ) = isFreeStakeholder(user);
        if(!_isFreeStakeholder){
            freeStakeholders.push(user);
        }
        bool isClaimable = btcAddressClaims[btcAddress];
        require(!isClaimable,"Already claimed");
        uint day = findDay();
        bool updateRequire = checkDataUpdationRequired();
        if(updateRequire){
            uint256 startDay = lastUpdatedDay.add(1);
            updateDailyData(startDay,day);
        }
        distributeFreeStake(user,btcAddress,day,balance, refererAddress); 
        unClaimedBtc = unClaimedBtc.sub(balance);
        perDayUnclaimedBTC[day] = perDayUnclaimedBTC[day].add(balance);
        claimedBTC = claimedBTC.add(balance);
        btcAddressClaims[btcAddress] = true;
        claimedBtcAddrCount ++ ;  
        dailyData memory dailyRecord = dailyDataUpdation[day];
        dailyRecord.unclaimed = unClaimedBtc;
        dailyDataUpdation[day] = dailyRecord;   
    }

    function findSillyWhalePenalty(uint256 amount) public pure returns (uint256){
        if(amount < 1000e8){
            return amount;
        }
        else if(amount >= 1000e8 && amount < 10000e8){  
            uint256 penaltyPercent = amount.sub(1000e8);
            penaltyPercent = penaltyPercent.mul(25 * 10 ** 2);
            penaltyPercent = penaltyPercent.div(9000e8); 
            penaltyPercent = penaltyPercent.add(50 * 10 ** 2); 
            uint256 deductedAmount = amount.mul(penaltyPercent); 
            deductedAmount = deductedAmount.div(10 ** 4);          
            uint256 adjustedBtc = amount.sub(deductedAmount);  
            return adjustedBtc;   
        }
        else { 
            uint256 adjustedBtc = amount.mul(25);
            adjustedBtc = adjustedBtc.div(10 ** 2);
            return adjustedBtc;  
        }
    }

    function findLatePenaltiy(uint256 dayPassed) public pure returns (uint256){
        uint256 totalDays = 350;
        uint256 latePenalty = totalDays.sub(dayPassed);
        latePenalty = latePenalty.mul( 10 ** 4);
        latePenalty = latePenalty.div(350);
        return latePenalty; 
    }

    function findSpeedBonus(uint256 day,uint256 share) public pure returns (uint256){
      uint256 speedBonus = 0;
      uint256 initialAmount = share;
      uint256 percentValue = initialAmount.mul(20);
      uint256 perDayValue = percentValue.div(350);  
      uint256 deductedAmount = perDayValue.mul(day);      
      speedBonus = percentValue.sub(deductedAmount);
      return speedBonus;

    }

    function findReferalBonus(address user,uint256 share,address referer) public pure returns(uint256) { 
       uint256 fixedAmount = share;
       uint256 sumUpAmount = 0;
      if(referer != address(0)){
       if(referer != user){
         
        // if referer is not user it self
        uint256 referdBonus = fixedAmount.mul(10);
        referdBonus = referdBonus.div(100);
        sumUpAmount = sumUpAmount.add(referdBonus);
       }
       else{
        // if a user referd it self  
        uint256 referdBonus = fixedAmount.mul(20);
        referdBonus = referdBonus.div(100);
        sumUpAmount = sumUpAmount.add(referdBonus);
        }
       }
       return sumUpAmount;
    }

    function createReferalRecords(address refererAddress, address referdAddress,uint256 awardedPTP) public {
        uint day = findDay();
        referalsRecord memory myRecord = referalsRecord({referdAddress:referdAddress,day:day,awardedPTP:awardedPTP});
        referals[refererAddress].push(myRecord);
    }

    function createFreeStakeClaimRecord(address userAddress,string memory btcAddress,uint256 day,uint256 balance,uint256 claimedAmount) internal onlyOwner{

     freeStakeClaimInfo memory myRecord = freeStakeClaimInfo({btcAddress:btcAddress,balanceAtMoment:balance,dayFreeStake:day,claimedAmount:claimedAmount,rawBtc:unClaimedBtc});
     freeStakeClaimRecords[userAddress].push(myRecord);
    }

    function freeStaking(uint256 stakeAmount,address userAddress) internal onlyOwner {
        uint256 id = generateId();
        uint256 dayInYear = 365;
        uint256 startDay = findDay();
        uint256 endDay = startDay.add(dayInYear);   
        uint256 endDayTimeStamp = findEndDayTimeStamp(endDay);
        stakerPool = stakerPool.add(stakeAmount);        
        uint256 share = generateShare(stakeAmount,0,0);
        subtractedShares[endDay] = subtractedShares[endDay].add(share);
        stakeRecord memory myRecord = stakeRecord({id:id,stakeShare:share, stakeName:'', numOfDays:dayInYear,
         currentTime:block.timestamp,claimed:false,startDay:startDay,endDay:endDay,
        endDayTimeStamp:endDayTimeStamp,isFreeStake:true,stakeAmount:stakeAmount,sharePrice:shareRate});
        stakeHolders[userAddress].push(myRecord); 
        dailyData memory dailyRecord = dailyDataUpdation[startDay];
        dailyRecord.stakeShareTotal = dailyRecord.stakeShareTotal.add(share);
        dailyRecord.dayPayout = getDailyShare(startDay);
         dailyRecord.stakedToken = dailyRecord.stakedToken.add(stakeAmount);
        dailyDataUpdation[startDay] = dailyRecord;
        

    }

    function distributeFreeStake(address userAddress,string memory btcAddress,uint256 day,uint256 balance,address refererAddress) internal {
            uint256 sillyWhaleValue = findSillyWhalePenalty(balance);
            uint share = sillyWhaleValue * 10 ** 8;
            share = share.div(10 ** 4);
            uint256 actualAmount = share;  
            uint256 latePenalty = findLatePenaltiy(day);
            actualAmount = actualAmount.mul(latePenalty);
            //Late Penalty return amount in 4 decimal to avoid decimal issue,
            // we didvide with 10 ** 4 to find actual amount 
            actualAmount = actualAmount.div(10 ** 4);
            //Speed Bonus
            
            uint256 userSpeedBonus = findSpeedBonus(day,actualAmount);
            userSpeedBonus = userSpeedBonus.div(100);
            actualAmount = actualAmount.add(userSpeedBonus);
            originAmount = originAmount.add(actualAmount);

            uint256 refBonus = 0;
           //Referal Mints 
            if(refererAddress != userAddress && refererAddress != address(0)){
                uint256 amount = actualAmount;
                uint256 referingBonus = amount.mul(20);
                referingBonus = referingBonus.div(100);
                originAmount = originAmount.add(referingBonus);
                mintAmount(refererAddress,referingBonus);
           }
        
         //Referal Bonus
            if(refererAddress != address(0)){
            refBonus = findReferalBonus(userAddress,actualAmount,refererAddress);
            actualAmount = actualAmount.add(refBonus);
            originAmount = originAmount.add(refBonus);
            createReferalRecords(refererAddress,userAddress,refBonus);
          }
         uint256 mintedValue = actualAmount.mul(10); 
         mintedValue = mintedValue.div(100);
         mintAmount(userAddress,mintedValue); 
         createFreeStakeClaimRecord(userAddress,btcAddress,day,balance,mintedValue);

         uint256 stakeAmount = actualAmount.mul(90);
         stakeAmount = stakeAmount.div(100); 
         freeStaking(stakeAmount,userAddress);
    }

    function getFreeStakeClaimRecord() public view returns (freeStakeClaimInfo[] memory claimRecords){
       return freeStakeClaimRecords[msg.sender];
    } 

    function extendStakeLength(uint256 totalDays, uint256 id) public { 
        uint256 currentDay = findDay();
        bool updateRequire = checkDataUpdationRequired();
        if(updateRequire){
            uint256 startDay = lastUpdatedDay.add(1);
            updateDailyData(startDay,currentDay);
        }
        stakeRecord[] memory myRecord = stakeHolders[msg.sender];
        for(uint i=0; i<myRecord.length; i++){
            if(myRecord[i].id == id){
                if(myRecord[i].isFreeStake){
                    if(totalDays >= 365){
                        require(myRecord[i].startDay + totalDays > myRecord[i].numOfDays , 'condition should not be meet');
                        myRecord[i].numOfDays = myRecord[i].startDay + totalDays;
                        myRecord[i].endDay = (myRecord[i].startDay).add(totalDays);
                        myRecord[i].endDayTimeStamp = findEndDayTimeStamp(myRecord[i].endDay);
                    }
                }
             stakeHolders[msg.sender][i] = myRecord[i];
            }
        }
    }

    function findAddress(uint256 day, address sender)public view returns(bool){
        address addressValue = AARecords[day][sender].user;
        if(addressValue == address(0)){
            return false;
        }
        else{
           return true;
        }
    }

    function enterAALobby (address refererAddress) external payable {
        require(msg.value > 0, '0 Balance');
        uint day = findDay();
        bool updateRequire = checkDataUpdationRequired();
        if(updateRequire){
            uint256 startDay = lastUpdatedDay.add(1);
            updateDailyData(startDay,day);
        }
        RecordInfo memory myRecord = RecordInfo({amount: msg.value, time: block.timestamp, claimed: false, user:msg.sender,refererAddress:refererAddress});
        bool check = findAddress(day,msg.sender);
        if(check == false){
            AARecords[day][msg.sender] = myRecord;
            perDayAARecords[day].push(msg.sender);
        }  
        else{
            RecordInfo memory record = AARecords[day][msg.sender];
            record.amount = record.amount.add(msg.value);
            AARecords[day][msg.sender] = record;
        }
      
        totalBNBSubmitted[day] = totalBNBSubmitted[day] + msg.value;
    }

    function getTotalBNB (uint day) public view returns (uint256){
        
       return totalBNBSubmitted[day];
    }

    function getAvailablePTP (uint day) public view returns (uint256 daySupply){
        uint256 hexAvailabel = 0;
       
        uint256 firstDayAvailabilty = 1000000000 * 10 ** 8; 
        if(day == 0){
            hexAvailabel = firstDayAvailabilty;
        }
        else{
            uint256 othersDayAvailability = 19000000 * 10 ** 8;
            uint256 totalUnclaimedToken = 0;
            for(uint256 i = 0; i < day; i++){
                totalUnclaimedToken= totalUnclaimedToken.add(perDayUnclaimedBTC[i]);
            }
            
            othersDayAvailability = othersDayAvailability.sub(totalUnclaimedToken);
            //as per rules we have to multiply it with 10^8 than divided with 10 ^ 4 but as we can make it multiply 
            //with 10 ^ 4
            othersDayAvailability = othersDayAvailability.mul(10 ** 4);
            hexAvailabel = othersDayAvailability.div(350);
        }
        daySupply = hexAvailabel;
       return daySupply;
    }

    function getTransactionRecords(uint day,address user) public view returns (RecordInfo memory record) {   
            return AARecords[day][user];
    }

    function countShare (uint256 userSubmittedBNB, uint256 dayTotalBNB, uint256 availablePTP) public pure returns  (uint256) {
        uint256 share = 0;
        share = userSubmittedBNB.div(dayTotalBNB);
        share = share.mul(availablePTP);
        return share;
    }

    function settleSubmission (uint day, address user) internal  {
        RecordInfo memory myRecord = AARecords[day][user];
                 myRecord.claimed = true;
                 AARecords[day][user] = myRecord;
    }

    function claimAATokens () public {
        uint256 presentDay = findDay();
        require(presentDay > 0,'not now');
        bool updateRequire = checkDataUpdationRequired();
        if(updateRequire){
            uint256 startDay = lastUpdatedDay.add(1);
            updateDailyData(startDay,presentDay);
        }
        uint256 prevDay = presentDay.sub(1);
        uint256 dayTotalBNB = getTotalBNB(prevDay);
        uint256 availablePTP = getAvailablePTP(prevDay);
        RecordInfo memory record = getTransactionRecords(prevDay,msg.sender);
        if(record.user != address(0) && record.claimed == false){
           uint256 userSubmittedBNB = record.amount;
           uint256 userShare = 0;
           uint256 referalBonus = 0;
           userShare = countShare(userSubmittedBNB,dayTotalBNB,availablePTP);
            address userReferer = record.refererAddress;
             if(userReferer != msg.sender && userReferer !=address(0)){
             uint256 amount = userShare;
             uint256 referingBonus = amount.mul(20);
             referingBonus = referingBonus.div(100);
             originAmount = originAmount.add(referingBonus);
             mintAmount(userReferer,referingBonus);
             createReferalRecords(userReferer,msg.sender,referingBonus);
             }
            referalBonus =  findReferalBonus(msg.sender,userShare,userReferer);  
             userShare = userShare.add(referalBonus);
             originAmount = originAmount.add(referalBonus);
             mintAmount(msg.sender,userShare);
             settleSubmission(prevDay,msg.sender);
             if(userReferer != address(0)){
            createReferalRecords(userReferer,msg.sender,referalBonus);
             }
        }
    }

    function getReferalRecords(address refererAddress) public view returns (referalsRecord[] memory referal) {
        
        return referals[refererAddress];
    }

    function transferPTP(address recipientAddress, uint256 _amount) public{
        _transfer(msg.sender,recipientAddress,_amount);
        transferInfo memory myRecord = transferInfo({amount: _amount,to:recipientAddress, from: msg.sender});
        transferRecords[msg.sender].push(myRecord);
    }

    function getTransferRecords( address _address ) public view returns (transferInfo[] memory transferRecord) {
        return transferRecords[_address];
    }

    function getBigPayDay() public view returns (uint256){
        uint256 totalAmount = 0;
        for(uint256 i = 0 ; i<=349; i++){
            dailyData memory data = dailyDataUpdation[i];
            uint256 btc = data.unclaimed.div(10 ** 8);
            uint256 bigPayDayAmount = btc.mul(2857);
            //it should be divieded with 10 ** 6 but we have to convert it in hex so we div it 10 ** 2
            bigPayDayAmount = bigPayDayAmount.div(10 ** 2);
            totalAmount = totalAmount.add(bigPayDayAmount);
        }
        return totalAmount;
    }
    
    function getShareRate() public view returns (uint256){
        return shareRate;
    }

}
